--====================DDL====================
//1. 계열정보를 저장할 카테고리 테이블을 생성
CREATE TABLE TB_CATEGORY(
NAME VARCHAR2(10),
USE_YN CHAR(1) DEFAULT 'Y'
);

//2. 과목 구분을 저장할 테이블을 생성
CREATE TABLE TB_CLASS_TYPE(
NO VARCHAR2(5) PRIMARY KEY,
NAME VARCHAR2(10)
);

//3. TB_CATEGORY 테이블의 NAME의 칼럼에 PRIMARY KEY를 생성
ALTER TABLE TB_CATEGORY ADD PRIMARY KEY(NAME);

//4. TB_CLASS_TYPE 테이블의 NAME 칼럼에 NUILL값이 들어가지 않도록하기
ALTER TABLE TB_CLASS_TYPE MODIFY NAME NOT NULL;

//5. 두 테이블에서 칼럼명이 NO인것은 크기를 10으로 NAME인것은 20으로 변경(기존타입 유지)
ALTER TABLE TB_CATEGORY MODIFY (NAME VARCHAR2(20));
ALTER TABLE TB_CLASS_TYPE MODIFY (NO VARCHAR2(10));
ALTER TABLE TB_CLASS_TYPE MODIFY (NAME VARCHAR2(20));

//6. 두 테이블의 NO칼럼과 NAME칼럼의 이름을 테이블 이름이 앞에 붙은 형태로 변경
ALTER TABLE TB_CATEGORY RENAME COLUMN NAME TO CATEGORY_NAME;
ALTER TABLE TB_CLASS_TYPE RENAME COLUMN NO TO CLASS_TYPE_NO;
ALTER TABLE TB_CLASS_TYPE RENAME COLUMN NAME TO CLASS_TYPE_NAME;

//7. PRIMARY KEY 이름을 PK+칼럼이름 으로 변경
ALTER TABLE TB_CATEGORY RENAME CONSTRAINT SYS_C008403 TO PK_CATEGORY_NAME;
ALTER TABLE TB_CLASS_TYPE RENAME CONSTRAINT SYS_C008402 TO PK_CLASS_TYPE_NO;

//8. 행 추가
INSERT INTO TB_CATEGORY(CATEGORY_NAME, USE_YN)
VALUES('공학', 'Y');
INSERT INTO TB_CATEGORY(CATEGORY_NAME, USE_YN)
VALUES('자연과학', 'Y');
INSERT INTO TB_CATEGORY(CATEGORY_NAME, USE_YN)
VALUES('의학', 'Y');
INSERT INTO TB_CATEGORY(CATEGORY_NAME, USE_YN)
VALUES('예체능', 'Y');
INSERT INTO TB_CATEGORY(CATEGORY_NAME, USE_YN)
VALUES('인문사회', 'Y');

//9. TB_DEPARTMENT의 CATEGORY칼럼이 TB_CATEGORY의 CATEGORY_NAME칼럼을 부모값으로 참조하도록 FOREIGN KEY를 지정.
ALTER TABLE TB_DEPARTMENT
ADD CONSTRAINT FK_DEPARTMENT_CATEGORY
FOREIGN KEY(CATEGORY) REFERENCES TB_CATEGORY(CATEGORY_NAME);

//10. 학생 일반정보 뷰 생성
CREATE VIEW VW_학생일반정보 AS
SELECT STUDENT_NO, STUDENT_NAME, STUDENT_ADDRESS
FROM TB_STUDENT
JOIN;

//11. 학생이름, 학과이름, 담당교수이름 으로 구성되어 있는 뷰를 생성. 지도교수가 없는 학생 고려. 학과별 정렬.
CREATE VIEW VW_지도면담 AS
SELECT S.STUDENT_NAME, D.DEPARTMENT_NAME, P.PROFESSOR_NAME
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D ON S.DEPARTMENT_NO = D.DEPARTMENT_NO
JOIN TB_PROFESSOR P ON S.COACH_PROFESSOR_NO = P.PROFESSOR_NO;

//12. 모든 학과별 학생수 확인하는 뷰 생성
CREATE VIEW VW_학과별학생수 AS
SELECT D.DEPARTMENT_NAME, COUNT(S.STUDENT_NO) STUDENT_COUNT
FROM TB_DEPARTMENT D
JOIN TB_STUDENT S ON S.DEPARTMENT_NO = D.DEPARTMENT_NO
GROUP BY DEPARTMENT_NAME;

//13. 학생일반정보 뷰를 통해 학번이 A213046인 학생의 이름을 변경
UPDATE VW_학생일반정보 SET STUDENT_NAME = '이하니' WHERE STUDENT_NO = 'A213046';

//14. 뷰를 통해 데이터를 변경할수 없게 뷰를 생성하는법?
//WITH READ ONLY를 붙여준다.

//15. 최근 3년 기준 수강인원이 가장 많았던 3과목을 출력
SELECT C.CLASS_NO 과목번호, C.CLASS_NAME 과목이름, COUNT(G.STUDENT_NO) 누적수강생수
FROM TB_CLASS C
JOIN TB_GRADE G ON C.CLASS_NO = G.CLASS_NO
WHERE TERM_NO > 202001
ORDER BY COUNT(G.STUDENT_NO)
GROUP BY CLASS_NO, CLASS_NAME
FETCH FIRST 3 ROWS ONLY;

--====================DML====================
//1. TB_CLASS_TYPE 테이블에 데이터 입력
INSERT INTO TB_CLASS_TYPE(CLASS_TYPE_NO, CLASS_TYPE_NAME)
VALUES(01, '전공필수');
INSERT INTO TB_CLASS_TYPE(CLASS_TYPE_NO, CLASS_TYPE_NAME)
VALUES(02, '전공선택');
INSERT INTO TB_CLASS_TYPE(CLASS_TYPE_NO, CLASS_TYPE_NAME)
VALUES(03, '교양필수');
INSERT INTO TB_CLASS_TYPE(CLASS_TYPE_NO, CLASS_TYPE_NAME)
VALUES(04, '교양선택');
INSERT INTO TB_CLASS_TYPE(CLASS_TYPE_NO, CLASS_TYPE_NAME)
VALUES(05, '논문지도');

//2. 학생일반정보 테이블 생성
CREATE TABLE TB_STUDENT_INFORMATION(
STUDENT_NO VARCHAR2(10 BYTE),
STUDENT_NAME VARCHAR2(40 BYTE),
STUDENT_ADDRESS VARCHAR2(200 BYTE)
);

//3. 국어국문학과 학생 정보만 있는 학과정보 테이블 생성
CREATE TABLE TB_국어국문학과(
STUDENT_NO VARCHAR2(10 BYTE),
STUDENT_NAME VARCHAR2(40 BYTE),
STUDENT_BIRTHYEAR DATE,
PROFESSOR_NAME VARCHAR2(40 BYTE)
);

//4. 학과 정원 10% 증가시키기
UPDATE TB_DEPARTMENT SET CAPACITY = CAPACITY + CAPACITY*0.1;
